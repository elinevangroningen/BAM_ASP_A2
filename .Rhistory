}
print(count)
count = 4
for(i in 1:6) {
count <- count + i
}
print(count)
count = 4
for(i in 1:6) {
print(i)
count <- count + i
}
print(count)
install.packages("Rtools")
writeLines('PATH="${RTOOLS40_HOME}\\usr\\bin;${PATH}"', con = "~/.Renviron")
fieldexp <- get_ECI_data('module-4-tutorial')
library(ECICourse)
fieldexp <- get_ECI_data('module-4-tutorial')
fieldexp
fieldexp %>%
count(D)
library(tidyverse)
fieldexp %>%
count(D)
ggplot(fieldexp, aes(x = factor(D), y = Y)) +
geom_jitter(width = .1, height = .1) +
labs(x = 'D')
fieldexp %>%
group_by(D) %>%
summarise(Y = mean(Y))
fieldexp %>%
group_by(D) %>%
summarise(Y = mean(Y), .groups = 'drop') %>%
arrange(D) %>%
getElement('Y') %>%
diff()
ate
get_ATE <- function(df) {
df %>%
group_by(D) %>%
summarise(Y = mean(Y), .groups = 'drop') %>%
arrange(D) %>%
getElement('Y') %>%
diff()
}
ate <-
fieldexp %>%
get_ATE()
ate
choose(360, 160)
set.seed(1)             # so your results match mine
new_D <- sample(rep(0:1, 160), 320, replace = FALSE)
new_D
sum(new_D == 1)
sum(new_D == 0)
fieldexp %>%
mutate(D = new_D) %>%
get_ATE()
get_random_ATE_under_sharp_null <- function() {
new_D <- sample(rep(0:1, 160), 320, replace = FALSE)
fieldexp %>%
mutate(D = new_D) %>%
get_ATE()
}
# Import libraries
library(tidyverse)
possibilities <- expand.grid(1:6, 1:6, 1:6, 1:6, 1:6, 1:6)
View(possibilities)
View(possibilities)
df <- tibble{
Market = 1:6,
Y0 = c(10, 12, 14, 5, 15, 6, 8, 5)
Y1 = c(12, 12, 20, 6, 20, 6, 6, 10, 5)
}
df <- tibble(
Market = 1:6,
Y0 = c(10, 12, 14, 5, 15, 6, 8, 5)
Y1 = c(12, 12, 20, 6, 20, 6, 6, 10, 5)
)
df <- tibble(
Market = 1:6,
Y0 = c(10, 12, 14, 5, 15, 6, 8, 5),
Y1 = c(12, 12, 20, 6, 20, 6, 6, 10, 5)
)
df
df <- tibble(
Market = 1:6,
Y0 = c(10, 12, 14, 5, 15, 6, 8, 5),
Y1 = c(12, 12, 20, 6, 20, 6, 10, 5)
)
df <- tibble(
Market = 1:8,
Y0 = c(10, 12, 14, 5, 15, 6, 8, 5),
Y1 = c(12, 12, 20, 6, 20, 6, 10, 5)
)
View(df)
View(df)
x <- .10*.9 + .2*.2 + .35*2 + 2.5*.3 + 4.4*.05
x
x <- (.10*.9) + (.2*.2) + (.35*2) + (.3*2.5) + (4.4*.05)
x
setwd("C:/Users/eline/Documents/BAM/blok1/ASP/BAM_ASP_A2")
setwd("C:/Users/eline/Documents/BAM/blok1/ASP/BAM_ASP_A2")
knitr::opts_chunk$set(warning = FALSE, message = FALSE,
comment = "", fig.height=2, fig.width=4, fig.align = "center")
# Load libraries
library(tidyverse)
library(stargazer)
library(wbstats)
# Define paths
dir <- "C:/Users/eline/Documents/BAM/blok1/ASP/tutorials/session4/"
dirProg <- paste0(dir, "programs/")
dirData <- paste0(dir, "data/")
dirRslt <- paste0(dir, "results/")
# Load world bank data
dfExport <- wb_data(indicator=c("IC.EXP.TMBC",       # Time to export
"NY.GDP.PCAP.CD",    # GDP per capita
"TG.VAL.TOTL.GD.ZS", # Merchandise trade % GDP
"NE.EXP.GNFS.ZS",    # Exports of goods and services (% of GDP)
"IC.EXP.CSDC.CD"),
country = "countries_only",
start_date = 2014,
end_date = 2019)
# Load and save file with variables of interest
save(dfWorld, file=paste0(dirData, "SelectedWorldData.sav"))
# Load and save file with variables of interest
save(dfExport, file=paste0(dirData, "SelectedWorldData.sav"))
load(file=paste0(dirData, "SelectedWorldData.sav"))
knitr::opts_chunk$set(warning = FALSE, message = FALSE,
comment = "", fig.height=2, fig.width=4, fig.align = "center")
# Load libraries
library(tidyverse)
library(stargazer)
library(wbstats)
# Define paths
dir <- "C:/Users/eline/Documents/BAM/blok1/ASP/tutorials/session4/"
dirProg <- paste0(dir, "programs/")
dirData <- paste0(dir, "data/")
dirRslt <- paste0(dir, "results/")
# Load world bank data
dfExport <- wb_data(indicator=c("IC.EXP.TMBC",       # Time to export
"NY.GDP.PCAP.CD",    # GDP per capita
"TG.VAL.TOTL.GD.ZS", # Merchandise trade % GDP
"NE.EXP.GNFS.ZS",    # Exports of goods and services (% of GDP)
"IC.EXP.CSDC.CD"),
country = "countries_only",
start_date = 2014,
end_date = 2019)
# Load and save file with variables of interest
save(dfExport, file=paste0(dirData, "SelectedWorldData.sav"))
load(file=paste0(dirData, "SelectedWorldData.sav"))
View(dfExport)
View(dfExport)
# Rename column names
colnames(dfExport)[colnames(dfWorld) == "IC.EXP.TMBC"]      <- "TimeExport"
# Rename column names
colnames(dfExport)[colnames(dfExport) == "IC.EXP.TMBC"]      <- "TimeExport"
colnames(dfExport)[colnames(dfExport) == "NY.GDP.PCAP.CD"]   <- "GDPCap"
colnames(dfExport)[colnames(dfExport) == "TG.VAL.TOTL.GD.Z"] <- "Merchandise"
colnames(dfExport)[colnames(dfExport) == "TG.VAL.TOTL.GD.Z"] <- "ExportGoodsServices"
colnames(dfExport)[colnames(dfExport) == "TG.VAL.TOTL.GD.Z"] <- "CostExport"
View(dfExport)
# Rename column names
colnames(dfExport)[colnames(dfExport) == "IC.EXP.TMBC"]       <- "TimeExport"
colnames(dfExport)[colnames(dfExport) == "NY.GDP.PCAP.CD"]    <- "GDPCap"
colnames(dfExport)[colnames(dfExport) == "TG.VAL.TOTL.GD.ZS"] <- "Merchandise"
colnames(dfExport)[colnames(dfExport) == "NE.EXP.GNFS.ZS"]    <- "ExportGoodsServices"
colnames(dfExport)[colnames(dfExport) == "IC.EXP.CSDC.CD"]    <- "CostExport"
# Load world bank data
dfExport <- wb_data(indicator=c("IC.EXP.TMBC",       # Time to export
"NY.GDP.PCAP.CD",    # GDP per capita
"TG.VAL.TOTL.GD.ZS", # Merchandise trade % GDP
"NE.EXP.GNFS.ZS",    # Exports of goods and services (% of GDP)
"IC.EXP.CSDC.CD"),   # Cost to export
country = "countries_only",
start_date = 2014,
end_date = 2019)
# Rename column names
colnames(dfExport)[colnames(dfExport) == "IC.EXP.TMBC"]       <- "TimeExport"
colnames(dfExport)[colnames(dfExport) == "NY.GDP.PCAP.CD"]    <- "GDPPerCap"
colnames(dfExport)[colnames(dfExport) == "TG.VAL.TOTL.GD.ZS"] <- "MerchandiseGDP"
colnames(dfExport)[colnames(dfExport) == "NE.EXP.GNFS.ZS"]    <- "ExportGoodsServices"
colnames(dfExport)[colnames(dfExport) == "IC.EXP.CSDC.CD"]    <- "CostExport"
# Subset complete observations, and implement an admittedly arbitrary
# observation period
dfExport.sub <- dfExport[complete.cases(dfExport),]
View(dfExport.sub)
dfExport.sub <- Export.sub[dfWorld.sub$Year >= 2014,]
dfExport.sub <- dfExport.sub[dfWorld.sub$Year >= 2014,]
dfExport.sub <- dfExport.sub[dfExport.sub$Year >= 2014,]
# Rename column names
colnames(dfExport)[colnames(dfExport) == "date"]              <- "Year"
colnames(dfExport)[colnames(dfExport) == "country"]           <- "Country"
colnames(dfExport)[colnames(dfExport) == "date"]              <- "Year"
colnames(dfExport)[colnames(dfExport) == "IC.EXP.TMBC"]       <- "TimeExport"
colnames(dfExport)[colnames(dfExport) == "NY.GDP.PCAP.CD"]    <- "GDPPerCap"
colnames(dfExport)[colnames(dfExport) == "TG.VAL.TOTL.GD.ZS"] <- "MerchandiseGDP"
colnames(dfExport)[colnames(dfExport) == "NE.EXP.GNFS.ZS"]    <- "ExportGoodsServices"
colnames(dfExport)[colnames(dfExport) == "IC.EXP.CSDC.CD"]    <- "CostExport"
dfExport.sub <- dfExport[complete.cases(dfExport),]
dfExport.sub <- dfExport.sub[dfExport.sub$Year >= 2014,]
dfExport.sub %>%
count(Country)
dfExport.sub %>%
count(Country) %>%
filter(n < 6)
incompleteCountries <- dfExport.sub %>%
count(Country) %>%
filter(n < 6)
incomplete <- dfExport.sub %>%
count(Country) %>%
filter(n < 6)
incompleteContries <- as.vector(incomplete['Country'])
View(incompleteCountries)
View(incompleteContries)
incompleteCountries <- as.vector(incomplete['Country'])
incompleteCountries
typeof(incompleteCountries)
# Remove all countries with incomplete observations
dfExport.sub <- dfExport[dfExport.sub$Country == incompleteCountries]
incompleteCountry <- as.vector(incomplete['Country'])
# Remove all countries with incomplete observations
dfExport.sub <- dfExport[dfExport.sub$Country != incompleteCountry,]
# Remove all countries with incomplete observations
dfExportComplete.sub <- dfExport %>%
filter(Country =! incompleteCountry)
# Remove all countries with incomplete observations
dfExportComplete.sub <- dfExport %>%
filter(Country != incompleteCountry)
# Remove all countries with incomplete observations
dfExportComplete.sub <- dfExport.sub %>%
filter(Country != incompleteCountry)
# Remove all countries with incomplete observations
dfExport.sub <- dfExport.sub %>%
filter(Country != incompleteCountry)
incompleteCountry <- as.vector(incomplete$Country)
# Remove all countries with incomplete observations
dfExport.sub <- dfExport.sub %>%
filter(Country in incompleteCountry)
# Generate list with all countries with incomplete observations
incomplete <- dfExport.sub %>%
count(Country) %>%
filter(n == 6)
completeCountry <- as.vector(incomplete$Country)
# Generate list with all countries with complete observations
complete <- dfExport.sub %>%
count(Country) %>%
filter(n == 6)
completeCountry <- as.vector(complete$Country)
# Remove all countries with incomplete observations
dfExport.sub.cmplt <- dfExport.sub[dfExport.sub %in% completeCountry,]
# Remove all countries with incomplete observations
dfExport.subcmplt <- dfExport.sub %>%
filter(Country %in% completeCountry)
# Generate list with all countries with complete observations
complete <- dfExport.sub %>%
count(Country) %>%
filter(n == 6)
completeCountry <- as.vector(complete$Country)
# Remove all countries with incomplete observations
dfExport.sub.cmplt <- dfExport.sub %>%
filter(Country %in% completeCountry)
stargazer(dfExport.sub.cmplt, type="text")
View(dfExport.sub.cmplt)
View(dfExport.sub.cmplt)
stargazer(dfExport.sub.cmplt, type="text")
stargazer(dfExport.sub.cmplt, type="text")
---
title: "section3_PDM"
author: "Eline van Groningen, Paola Priante, Valery Maasdamme, Yuhu Wang"
date: "9/25/2020"
output: pdf_document
---
```{r setup, include=FALSE}
knitr::opts_chunk$set(warning = FALSE, message = FALSE,
comment = "", fig.height=2, fig.width=4, fig.align = "center")
```
# Panel Data Modeling: time to export
Downloading the libraries
Definition dependent variable:
Border compliance captures the time and cost associated with compliance with the
economy’s customs regulations and with regulations relating to other inspections
that are mandatory in order for the shipment to cross the economy’s border, as
well as the time and cost for handling that takes place at its port or border.
The time and cost for this segment include time and cost for customs clearance
and inspection procedures conducted by other government agencies.
(Source: https://data.worldbank.org/indicator/IC.EXP.TMBC?end=2019&start=2014)
```{r}
# Load libraries
library(tidyverse)
library(stargazer)
library(wbstats)
# Define paths
dir <- "C:/Users/eline/Documents/BAM/blok1/ASP/tutorials/session4/"
dirProg <- paste0(dir, "programs/")
dirData <- paste0(dir, "data/")
dirRslt <- paste0(dir, "results/")
# Load world bank data
dfExport <- wb_data(indicator=c("IC.EXP.TMBC",       # Time to export
"NY.GDP.PCAP.CD",    # GDP per capita
"TG.VAL.TOTL.GD.ZS", # Merchandise trade % GDP
"NE.EXP.GNFS.ZS",    # Exports of goods and services (% of GDP)
"IC.EXP.CSDC.CD"),   # Cost to export
country = "countries_only",
start_date = 2014,
end_date = 2019)
# Load and save file with variables of interest
save(dfExport, file=paste0(dirData, "SelectedWorldData.sav"))
load(file=paste0(dirData, "SelectedWorldData.sav"))
# Rename column names
colnames(dfExport)[colnames(dfExport) == "date"]              <- "Year"
colnames(dfExport)[colnames(dfExport) == "country"]           <- "Country"
colnames(dfExport)[colnames(dfExport) == "date"]              <- "Year"
colnames(dfExport)[colnames(dfExport) == "IC.EXP.TMBC"]       <- "TimeExport"
colnames(dfExport)[colnames(dfExport) == "NY.GDP.PCAP.CD"]    <- "GDPPerCap"
colnames(dfExport)[colnames(dfExport) == "TG.VAL.TOTL.GD.ZS"] <- "MerchandiseGDP"
colnames(dfExport)[colnames(dfExport) == "NE.EXP.GNFS.ZS"]    <- "ExportGoodsServices"
colnames(dfExport)[colnames(dfExport) == "IC.EXP.CSDC.CD"]    <- "CostExport"
# Subset complete observations, and implement an admittedly arbitrary
# observation period
dfExport.sub <- dfExport[complete.cases(dfExport),]
dfExport.sub <- dfExport.sub[dfExport.sub$Year >= 2014,]
# Generate list with all countries with complete observations
complete <- dfExport.sub %>%
count(Country) %>%
filter(n == 6)
completeCountry <- as.vector(complete$Country)
# Remove all countries with incomplete observations
dfExport.sub.cmplt <- dfExport.sub %>%
filter(Country %in% completeCountry)
stargazer(dfExport.sub.cmplt, type="text")
```
## 1
```{r}
```
## 2
```{r}
```
## 3
```{r}
```
## 4
```{r}
```
## 5
```{r}
```
# Define paths
dir <- "C:/Users/eline/Documents/BAM/blok1/ASP/tutorials/session4/"
dirProg <- paste0(dir, "programs/")
dirData <- paste0(dir, "data/")
dirRslt <- paste0(dir, "results/")
# Load world bank data
dfExport <- wb_data(indicator=c("IC.EXP.TMBC",       # Time to export
"NY.GDP.PCAP.CD",    # GDP per capita
"TG.VAL.TOTL.GD.ZS", # Merchandise trade % GDP
"NE.EXP.GNFS.ZS",    # Exports of goods and services (% of GDP)
"IC.EXP.CSDC.CD"),   # Cost to export
country = "countries_only",
start_date = 2014,
end_date = 2019)
# Load and save file with variables of interest
save(dfExport, file=paste0(dirData, "SelectedWorldData.sav"))
load(file=paste0(dirData, "SelectedWorldData.sav"))
# Rename column names
colnames(dfExport)[colnames(dfExport) == "date"]              <- "Year"
colnames(dfExport)[colnames(dfExport) == "country"]           <- "Country"
colnames(dfExport)[colnames(dfExport) == "date"]              <- "Year"
colnames(dfExport)[colnames(dfExport) == "IC.EXP.TMBC"]       <- "TimeExport"
colnames(dfExport)[colnames(dfExport) == "NY.GDP.PCAP.CD"]    <- "GDPPerCap"
colnames(dfExport)[colnames(dfExport) == "TG.VAL.TOTL.GD.ZS"] <- "MerchandiseGDP"
colnames(dfExport)[colnames(dfExport) == "NE.EXP.GNFS.ZS"]    <- "ExportGoodsServices"
colnames(dfExport)[colnames(dfExport) == "IC.EXP.CSDC.CD"]    <- "CostExport"
# Subset complete observations, and implement an admittedly arbitrary
# observation period
dfExport.sub <- dfExport[complete.cases(dfExport),]
dfExport.sub <- dfExport.sub[dfExport.sub$Year >= 2014,]
# Generate list with all countries with complete observations
complete <- dfExport.sub %>%
count(Country) %>%
filter(n == 6)
completeCountry <- as.vector(complete$Country)
# Remove all countries with incomplete observations
dfExport.sub.cmplt <- dfExport.sub %>%
filter(Country %in% completeCountry)
stargazer(dfExport.sub.cmplt, type="text")
dfExport.sub.cmplt
typeof(dfExport.sub.cmplt)
stargazer(dfExport.sub, type="text")
stargazer(dfExport, type="text")
# Generate table with summary statistics
stargazer(dfExport.sub.cmplt, type="text")
# Define paths
dir <- "C:/Users/eline/Documents/BAM/blok1/ASP/tutorials/session4/"
dirProg <- paste0(dir, "programs/")
dirData <- paste0(dir, "data/")
dirRslt <- paste0(dir, "results/")
# Load world bank data
dfExport <- wb_data(indicator=c("IC.EXP.TMBC",       # Time to export
"NY.GDP.PCAP.CD",    # GDP per capita
"TG.VAL.TOTL.GD.ZS", # Merchandise trade % GDP
"NE.EXP.GNFS.ZS",    # Exports of goods and services (% of GDP)
"IC.EXP.CSDC.CD"),   # Cost to export
country = "countries_only",
start_date = 2014,
end_date = 2019)
# Load and save file with variables of interest
save(dfExport, file=paste0(dirData, "SelectedWorldData.sav"))
load(file=paste0(dirData, "SelectedWorldData.sav"))
# Rename column names
colnames(dfExport)[colnames(dfExport) == "date"]              <- "Year"
colnames(dfExport)[colnames(dfExport) == "country"]           <- "Country"
colnames(dfExport)[colnames(dfExport) == "date"]              <- "Year"
colnames(dfExport)[colnames(dfExport) == "IC.EXP.TMBC"]       <- "TimeExport"
colnames(dfExport)[colnames(dfExport) == "NY.GDP.PCAP.CD"]    <- "GDPPerCap"
colnames(dfExport)[colnames(dfExport) == "TG.VAL.TOTL.GD.ZS"] <- "MerchandiseGDP"
colnames(dfExport)[colnames(dfExport) == "NE.EXP.GNFS.ZS"]    <- "ExportGoodsServices"
colnames(dfExport)[colnames(dfExport) == "IC.EXP.CSDC.CD"]    <- "CostExport"
# Subset complete observations, and implement an admittedly arbitrary
# observation period
dfExport.sub <- dfExport[complete.cases(dfExport),]
# Generate list with all countries with complete observations
complete <- dfExport.sub %>%
count(Country) %>%
filter(n == 6)
completeCountry <- as.vector(complete$Country)
# Remove all countries with incomplete observations
dfExport.sub.cmplt <- dfExport.sub %>%
filter(Country %in% completeCountry)
# Generate table with summary statistics
stargazer(dfExport.sub.cmplt, type="text")
# Generate table with summary statistics
stargazer(dfExport.sub.cmplt, type="text")
# Generate table with summary statistics
stargazer(dfExport, type="text")
# Generate data frame only containing countries with complete observations
dfExport.sub.cmplt <- dfExport.sub %>%
filter(Country %in% completeCountry)
# Generate table with summary statistics
stargazer(dfExport.sub.cmplt, type="text")
# Convert to data frame
dfExport.sub.cmplt_test <- data.frame(matrix(unlist(dfExport.sub.cmplt)))
View(dfExport.sub.cmplt_test)
# Convert to data frame
dfExport.sub.cmplt_test <- data.frame(matrix(unlist(dfExport.sub.cmplt),
nrow=length(l), byrow=T))
# Convert to data frame
dfExport.sub.cmplt_test <- data.frame(matrix(unlist(dfExport.sub.cmplt),
nrow=length(dfExport.sub.cmplt),
byrow=T))
View(dfExport.sub.cmplt_test)
View(dfExport.sub.cmplt_test)
typeof(dfExport)
# Define paths
dir <- "C:/Users/eline/Documents/BAM/blok1/ASP/ASP_BAM_A2/"
dir <- "C:/Users/eline/Documents/BAM/blok1/ASP/ASP_BAM_A2/"
dirProg <- paste0(dir, "programs/")
dirData <- paste0(dir, "data/")
dirRslt <- paste0(dir, "results/")
# Load and save file with variables of interest
save(dfExport, file=paste0(dirData, "SelectedWorldData.sav"))
# Define paths
dir <- "C:/Users/eline/Documents/BAM/blok1/ASP/BAM_ASP_A2/"
# Define paths
dir <- "C:/Users/eline/Documents/BAM/blok1/ASP/BAM_ASP_A2/"
dirProg <- paste0(dir, "programs/")
dirData <- paste0(dir, "data/")
dirRslt <- paste0(dir, "results/")
# Load and save file with variables of interest
save(dfExport, file=paste0(dirData, "SelectedWorldData.sav"))
load(file=paste0(dirData, "SelectedWorldData.sav"))
nrow=length(dfExport.sub.cmplt))
# Convert to data frame
dfExport.sub.cmplt_test <- data.frame(matrix(unlist(dfExport.sub.cmplt),
nrow=length(dfExport.sub.cmplt)))
# Convert to data frame
dfExport.sub.cmplt_test <- data.frame(matrix(unlist(dfExport.sub.cmplt)))
View(dfExport.sub.cmplt_test)
# Convert to data frame
dfExport.sub.cmplt_test <- data.frame(matrix(unlist(dfExport.sub.cmplt)),
nrow=length(dfExport.sub.cmplt))
View(dfExport.sub)
# Convert to data frame
dfExport.sub.cmplt_test <- data.frame(matrix(unlist(dfExport.sub.cmplt)),
nrow=9)
# Convert to data frame
dfExport.sub.cmplt_test <- as.data.frame(dfExport.sub.cmplt)
View(dfExport.sub.cmplt_test)
# Generate table with summary statistics
stargazer(dfExport.sub.cmplt_test, type="text")
a
# Convert to data frame
dfExport.sub.cmplt <- as.data.frame(dfExport.sub.cmplt)
# Generate table with summary statistics
stargazer(dfExport.sub.cmplt, type="text")
# Plot Cost Export
plot <- ggplot(dfExport.sub.cmplt, aes(x=CostExport, y=TimeExport)) +
geom_point() + geom_smooth()
plot_CostExport
ggplot
# Plot Cost Export
plot_CostExport <- ggplot(dfExport.sub.cmplt, aes(x=CostExport, y=TimeExport)) +
geom_point() + geom_smooth()
plot_CostExport
# Plot Cost Export
plot_CostExport <- ggplot(dfExport.sub.cmplt, aes(x=CostExport, y=TimeExport, color="Country")) +
geom_point() + geom_smooth()
plot_CostExport
# Plot Cost Export
plot_CostExport <- ggplot(dfExport.sub.cmplt, aes(x=CostExport, y=TimeExport, color=Country)) +
geom_point() + geom_smooth()
plot_CostExport

#Determine country averages of TimeExport and CostExport to the data frame
dfExport.sub.cmplt.avg<- ddply(dfExport.sub.cmplt, .(Country), summarise,
avgTimeExport = mean(TimeExport, na.rm = TRUE),
avgCostExport = mean(CostExport, na.rm = TRUE),
runValid = length(Country))
#Merge
dfExport.sub.cmplt <- merge(dfExport.sub.cmplt, dfExport.sub.cmplt.avg, by= "Country")
#Calculate deamed value of the dependent
attach(dfExport.sub.cmplt)
dfExport.sub.cmplt$diff.TimeExport <- TimeExport - avgTimeExport
dfExport.sub.cmplt$diff.CostExport <- CostExport - avgCostExport
detach(dfExport.sub.cmplt)
#Select countries
subCountries <- c("Australia", "Bolivia", "Brazil","Portugal", "Thailand", "Bulgaria", "China", "Finland", "India")
dfExport.sub.cmplt <- dfExport.sub.cmplt[dfExport.sub.cmplt$Country %in% subCountries,]
dfExport.sub.cmplt.avg <- dfExport.sub.cmplt.avg[dfExport.sub.cmplt.avg$Country %in% subCountries,]
#Total variation: the straight line is the best fitting line
#through the scatter, which is obtained with pooled estimation
#of the relation between life expectancy and GDP
ggplot(dfExport.sub.cmplt, aes(x=CostExport, y=TimeExport))+
#add the annual outcomes coloured by Country
geom_point(aes(color=Country), size=2)+
#add regression lines for the countries
geom_smooth(method="lm", se=FALSE, colour="gray")+
#label the axis
xlim(0, 300) + ylim(0, 110)+
xlab("Cost of Export")+
ylab("Time of Export")+
theme(axis.title= element_text(size=rel(1)),
axis.text= element_text(size=rel(1)))+
guides(colour = guide_legend(override.aes = list(size=1.5)))
dfExport.sub.cmplt.avg <-
ddply(dfExport.sub.cmplt, .(Country), summarise,
avg.TimeExport   = mean(TimeExport, na.rm=TRUE),
avg.GDPPerCap    = mean(GDPPerCap, na.rm=TRUE),
avg.CostExport   = mean(CostExport, na.rm=TRUE),
avg.ExportGoodsServices     = mean(ExportGoodsServices, na.rm=TRUE),
avg.MerchandiseGDP   = mean(MerchandiseGDP, na.rm=TRUE),
numValid         = length(Country))
#Merge averages in dfExport.sub.cmplt.avg with dfExport.sub.cmplt (this can be done with
dfExport.sub.cmplt <- merge(dfExport.sub.cmplt, dfExport.sub.cmplt.avg,
by="Country")
attach(dfExport.sub.cmplt)
dfExport.sub.cmplt$diff.TimeExport   <- TimeExport   - avg.TimeExport
dfExport.sub.cmplt$diff.GDPPerCap    <- GDPPerCap    - avg.GDPPerCap
dfExport.sub.cmplt$diff.CostExport   <- CostExport   - avg.CostExport
dfExport.sub.cmplt$diff.ExportGoodsServices <- ExportGoodsServices  -
avg.ExportGoodsServices
View(dfExport.sub.cmplt.avg)
View(dfExport.sub.cmplt)
attach(dfExport.sub.cmplt)
attach(dfExport.sub.cmplt)
dfExport.sub.cmplt$diff.TimeExport   <- TimeExport   - avg.TimeExport
dfExport.sub.cmplt$diff.GDPPerCap    <- GDPPerCap    - avg.GDPPerCap
View(dfExport.sub)
dfExport.sub.cmplt$diff.GDPPerCap    <- GDPPerCap    - avg.GDPPerCap
dfExport.sub.cmplt$diff.TimeExport   <- TimeExport   - avg.TimeExport
dfExport.sub.cmplt$diff.CostExport   <- CostExport   - avg.CostExport
dfExport.sub.cmplt$diff.MerchandiseGDP   <- MerchandiseGDP   -
avg.MerchandiseGDP
attach(dfExport.sub.cmplt)
dfExport.sub.cmplt$diff.TimeExport   <- TimeExport   - avg.TimeExport
dfExport.sub.cmplt$diff.GDPPerCap    <- GDPPerCap    - avg.GDPPerCap
dfExport.sub.cmplt$diff.ExportGoodsServices <- ExportGoodsServices  -
avg.ExportGoodsServices
dfExport.sub.cmplt$diff.MerchandiseGDP   <- MerchandiseGDP   -
avg.MerchandiseGDP
# Load libraries
library(tidyverse)
library(stargazer)
library(wbstats)
library(ggplot2)
library(plyr)
library(dplyr)
# Define paths
dir <- "C:/Users/eline/Documents/BAM/blok1/ASP/BAM_ASP_A2/"
dir <- "C:/Users/ppria/Documents/BAM_ASP_A2/"
dirProg <- paste0(dir, "programs/")
dirData <- paste0(dir, "data/")
dirRslt <- paste0(dir, "results/")
# Load world bank data
dfExport <- wb_data(indicator=c("IC.EXP.TMBC",       # Time to export
"NY.GDP.PCAP.CD",    # GDP per capita
"TG.VAL.TOTL.GD.ZS", # Merchandise trade % GDP
"NE.EXP.GNFS.ZS",    # Exports of goods and services (% of GDP)
"IC.EXP.CSDC.CD"),   # Cost to export
country = "countries_only",
start_date = 2014,
end_date = 2019)
total_countries <- length(unique(dfExport$country))
total_countries
# Load and save file with variables of interest
save(dfExport, file=paste0(dirData, "SelectedWorldData.sav"))
# Load libraries
library(tidyverse)
library(stargazer)
library(wbstats)
library(ggplot2)
library(plyr)
library(dplyr)
# Define paths
dir <- "C:/Users/eline/Documents/BAM/blok1/ASP/BAM_ASP_A2/"
dir <- "C:/Users/ppria/Documents/BAM_ASP_A2/"
dirProg <- paste0(dir, "programs/")
dirData <- paste0(dir, "data/")
dirRslt <- paste0(dir, "results/")
# Load world bank data
dfExport <- wb_data(indicator=c("IC.EXP.TMBC",       # Time to export
"NY.GDP.PCAP.CD",    # GDP per capita
"TG.VAL.TOTL.GD.ZS", # Merchandise trade % GDP
"NE.EXP.GNFS.ZS",    # Exports of goods and services (% of GDP)
"IC.EXP.CSDC.CD"),   # Cost to export
country = "countries_only",
start_date = 2014,
end_date = 2019)
total_countries <- length(unique(dfExport$country))
total_countries
# Load and save file with variables of interest
save(dfExport, file=paste0(dirData, "SelectedWorldData.sav"))
# Determine country averages of the included variables, as well as the number of
# non missing observations during the selected observation period
dfExport.sub.cmplt.avg <-
ddply(dfExport.sub.cmplt, .(Country), summarise,
avg.TimeExport   = mean(TimeExport, na.rm=TRUE),
avg.GDPPerCap    = mean(GDPPerCap, na.rm=TRUE),
avg.CostExport   = mean(CostExport, na.rm=TRUE),
avg.ExportGoodsServices     = mean(ExportGoodsServices, na.rm=TRUE),
avg.MerchandiseGDP   = mean(MerchandiseGDP, na.rm=TRUE),
numValid         = length(Country))
# Load libraries
library(tidyverse)
library(stargazer)
library(wbstats)
library(ggplot2)
library(plyr)
library(dplyr)
# Define paths
dir <- "C:/Users/eline/Documents/BAM/blok1/ASP/BAM_ASP_A2/"
dir <- "C:/Users/ppria/Documents/BAM_ASP_A2/"
dirProg <- paste0(dir, "programs/")
dirData <- paste0(dir, "data/")
dirRslt <- paste0(dir, "results/")
# Load world bank data
dfExport <- wb_data(indicator=c("IC.EXP.TMBC",       # Time to export
"NY.GDP.PCAP.CD",    # GDP per capita
"TG.VAL.TOTL.GD.ZS", # Merchandise trade % GDP
"NE.EXP.GNFS.ZS",    # Exports of goods and services (% of GDP)
"IC.EXP.CSDC.CD"),   # Cost to export
country = "countries_only",
start_date = 2014,
end_date = 2019)
total_countries <- length(unique(dfExport$country))
total_countries
# Rename column names
colnames(dfExport)[colnames(dfExport) == "date"]              <- "Year"
colnames(dfExport)[colnames(dfExport) == "country"]           <- "Country"
colnames(dfExport)[colnames(dfExport) == "date"]              <- "Year"
colnames(dfExport)[colnames(dfExport) == "IC.EXP.TMBC"]       <- "TimeExport"
colnames(dfExport)[colnames(dfExport) == "NY.GDP.PCAP.CD"]    <- "GDPPerCap"
colnames(dfExport)[colnames(dfExport) == "TG.VAL.TOTL.GD.ZS"] <- "MerchandiseGDP"
colnames(dfExport)[colnames(dfExport) == "NE.EXP.GNFS.ZS"]    <- "ExportGoodsServices"
colnames(dfExport)[colnames(dfExport) == "IC.EXP.CSDC.CD"]    <- "CostExport"
# Subset complete observations, and implement an admittedly arbitrary
# observation period
dfExport.sub <- dfExport[complete.cases(dfExport),]
# Generate list with all countries with complete observations
complete <- dfExport.sub %>%
dplyr::count(Country) %>%
filter(n == 6)
completeCountry <- as.vector(complete$Country)
# Generate data frame only containing countries with complete observations
dfExport.sub.cmplt <- dfExport.sub %>%
filter(Country %in% completeCountry)
# Convert to data frame
dfExport.sub.cmplt <- as.data.frame(dfExport.sub.cmplt)
# Generate table with summary statistics
stargazer(dfExport.sub.cmplt)
#Select observation with non missing TimeExport and CostExport
dfExport.sub.cmplt<- subset(dfExport.sub, !is.na(TimeExport)& !is.na(CostExport),
select= c(Country, Year, TimeExport, CostExport))
#Determine country averages of TimeExport and CostExport to the data frame
dfExport.sub.cmplt.avg<- ddply(dfExport.sub.cmplt, .(Country), summarise,
avgTimeExport = mean(TimeExport, na.rm = TRUE),
avgCostExport = mean(CostExport, na.rm = TRUE),
runValid = length(Country))
#Merge
dfExport.sub.cmplt <- merge(dfExport.sub.cmplt, dfExport.sub.cmplt.avg, by= "Country")
#Calculate deamed value of the dependent
attach(dfExport.sub.cmplt)
dfExport.sub.cmplt$diff.TimeExport <- TimeExport - avgTimeExport
dfExport.sub.cmplt$diff.CostExport <- CostExport - avgCostExport
detach(dfExport.sub.cmplt)
dfExport.sub.cmplt.avg <-
ddply(dfExport.sub.cmplt, .(Country), summarise,
avg.TimeExport   = mean(TimeExport, na.rm=TRUE),
avg.GDPPerCap    = mean(GDPPerCap, na.rm=TRUE),
avg.CostExport   = mean(CostExport, na.rm=TRUE),
avg.ExportGoodsServices     = mean(ExportGoodsServices, na.rm=TRUE),
avg.MerchandiseGDP   = mean(MerchandiseGDP, na.rm=TRUE),
numValid         = length(Country))
#Merge averages in dfExport.sub.cmplt.avg with dfExport.sub.cmplt (this can be done with
dfExport.sub.cmplt <- merge(dfExport.sub.cmplt, dfExport.sub.cmplt.avg,
by="Country")
attach(dfExport.sub.cmplt)
dfExport.sub.cmplt$diff.TimeExport   <- TimeExport   - avg.TimeExport
dfExport.sub.cmplt$diff.GDPPerCap    <- GDPPerCap    - avg.GDPPerCap
dfExport.sub.cmplt$diff.CostExport   <- CostExport   - avg.CostExport
dfExport.sub.cmplt$diff.ExportGoodsServices <- ExportGoodsServices  -
avg.ExportGoodsServices
dfExport.sub.cmplt$diff.MerchandiseGDP   <- MerchandiseGDP   -
avg.MerchandiseGDP
detach(dfExport.sub.cmplt)
#Formulate the model
mdlA <- TimeExport ~ GDPPerCap + CostExport + ExportGoodsServices +
MerchandiseGDP
#Make between and within group data frames
#For convenience two datasets are made that contain the model
#variables for the within group differences and the between
#group difference
# find the variable of interest
mdlvars <- all.vars(mdlA)
mdlvars.avg <- paste0("avg.", mdlvars)
mdlvars.diff <- paste0("diff.", mdlvars)
# Select variables from the data frames
dfExport.between <- dfExport.sub.cmplt.avg[mdlvars.avg]
dfExport.within <-dfExport.sub.cmplt[mdlvars.diff]
# Rename column names in order to make use  of the same model specification
# mdlA, and to conveniently merge the regression objects in stargazer
colnames(dfExport.within) <-
gsub("diff\\.", "", colnames(dfExport.within))
colnames(dfExport.between) <-
gsub("avg\\.", "", colnames(dfExport.between))
## Estimation of the pooled model
rsltPool <- lm(mdlA, data= dfExport.sub.cmplt)
rsltPool <- lm(mdlA, data= dfExport.sub.cmplt)
# Set dir >> Eline
dir <- "C:/Users/eline/Documents/BAM/blok1/ASP/BAM_ASP_A2/"
# Load csv and generate subset containing only variables for interest
da.IV <- read.csv(file=paste0(dir, "data/IV_dataset.csv"), header=TRUE)
da.IV_sub <- subset(da.IV,select = c("age", "educ", "lnwage", "married", "qob",
"SMSA", "yob"))
rslt2SLS.A <- ivreg(lnwage ~ educ | qob, data=da.IV)
stargazer(rslt2SLS.A, type= "text")
rslt2SLS.B <- ivreg(lnwage ~ educ + married + SMSA | married + SMSA + qob,
data=da.IV)
stargazer(rslt2SLS.A, rslt2SLS.B)
da.IV_sub$qob <- as.factor(da.IV_sub$qob)
da.IV_sub$yob <- as.factor(da.IV_sub$yob)
# Summary statistics
stargazer(da.IV_sub, title="Summary Statistics")
# Generate frequency table married
yob_freq <- as.data.frame(table(df.IV$yob))
# Generate frequency table married
yob_freq <- as.data.frame(table(df.IV_sub$yob))
# Set dir >> Eline
dir <- "C:/Users/eline/Documents/BAM/blok1/ASP/BAM_ASP_A2/"
# Load csv and generate subset containing only variables for interest
da.IV <- read.csv(file=paste0(dir, "data/IV_dataset.csv"), header=TRUE)
# Load csv and generate subset containing only variables for interest
da.IV <- read.csv(file=paste0(dir, "data/IV_dataset.csv"), header=TRUE)
da.IV_sub <- subset(da.IV,select = c("age", "educ", "lnwage", "married", "qob",
"SMSA", "yob"))
da.IV$yob <- as.factor(da.IV$yob)
# Generate frequency table married
yob_freq <- as.data.frame(table(df.IV$yob))
# Convert to data frame
df.IV <- as.data.frame(da.IV)
# Generate frequency table married
yob_freq <- as.data.frame(table(df.IV$yob))
stargazer(yob_freq, summary=FALSE)
# Load csv and generate subset containing only variables for interest
da.IV <- read.csv(file=paste0(dir, "data/IV_dataset.csv"), header=TRUE)
# Load csv and generate subset containing only variables for interest
da.IV <- read.csv(file=paste0(dir, "data/IV_dataset.csv"), header=TRUE)
da.IV_sub <- subset(da.IV,select = c("age", "educ", "lnwage", "married", "qob",
"SMSA", "yob"))
da.IV_sub$qob <- as.factor(da.IV_sub$qob)
# Summary statistics
stargazer(da.IV_sub, title="Summary Statistics")
rslt2SLS.A <- ivreg(lnwage ~ educ | qob, data=da.IV)
stargazer(rslt2SLS.A, type= "text")
library(tidyverse)
library(stargazer)
library(dagitty)
library(gridExtra)
library(tinytex)
library(stargazer)
library(AER)
library(ivpack)
library(car)
library(sandwich)
da.IV <- subset(da.IV, select = c("age", "educ", "lnwage", "married", "qob",
"SMSA", "yob"))
# Load csv and generate subset containing only variables for interest
da.IV <- read.csv(file=paste0(dir, "data/IV_dataset.csv"), header=TRUE)
# Set dir >> Eline
dir <- "C:/Users/eline/Documents/BAM/blok1/ASP/BAM_ASP_A2/"
# Load csv and generate subset containing only variables for interest
da.IV <- read.csv(file=paste0(dir, "data/IV_dataset.csv"), header=TRUE)
rslt2SLS.A <- ivreg(lnwage ~ educ | qob, data=da.IV)
summary(rslt2SLS.A)
stargazer(rslt2SLS.A, type= "text")
rslt2SLS.B <- ivreg(lnwage ~ educ + married + SMSA | married + SMSA + qob,
data=da.IV)
stargazer(rslt2SLS.A, rslt2SLS.B)
stargazer(rslt2SLS.A, rslt2SLS.B, type="text")
da.IV$qob <- as.factor(da.IV$qob)
rslt2SLS.A <- ivreg(lnwage ~ educ | qob, data=da.IV)
summary(rslt2SLS.A)
stargazer(rslt2SLS.A, type= "text")
knitr::opts_chunk$set(warning = FALSE, message = FALSE,
comment = "", fig.height=2, fig.width=4, fig.align = "center")
# Set dir >> Eline
dir <- "C:/Users/eline/Documents/BAM/blok1/ASP/BAM_ASP_A2/"
# Load csv and generate subset containing only variables for interest
da.IV <- read.csv(file=paste0(dir, "data/IV_dataset.csv"), header=TRUE)
da.IV <- subset(da.IV, select = c("age", "educ", "lnwage", "married", "qob",
"SMSA", "yob"))
# Load csv and generate subset containing only variables for interest
da.IV <- read.csv(paste0(dir, "data/IV_dataset.csv"), header = TRUE)
# Load csv and generate subset containing only variables for interest
da.IV <- read.csv(paste0(dir, "data/IV_dataset.csv"), header = TRUE)
da.IV <- subset(da.IV, select = c("age", "educ", "lnwage", "married", "qob",
"SMSA", "yob"))
da.IV$qob <- as.factor(da.IV$qob)
# To change those variables which should be factor variables into factor variables
g1.1 <- ggplot(data = da.IV, aes(qob, educ, fill=qob)) +
geom_point(size = 0.5) +
geom_smooth(method = "lm", color = "blue", alpha = 0.2)  +
theme_bw() +
geom_boxplot() + scale_fill_brewer(palette="Dark2") +
theme(plot.caption =  element_text(hjust = 0.5, size = 16, face = "bold"),
legend.text=element_text(size=16)) +
labs(x = "Quarter of Birth", y = "Education(in years)")
library(tidyverse)
library(stargazer)
library(dagitty)
library(gridExtra)
library(tinytex)
library(stargazer)
library(AER)
library(ivpack)
library(car)
library(sandwich)
# To change those variables which should be factor variables into factor variables
g1.1 <- ggplot(data = da.IV, aes(qob, educ, fill=qob)) +
geom_point(size = 0.5) +
geom_smooth(method = "lm", color = "blue", alpha = 0.2)  +
theme_bw() +
geom_boxplot() + scale_fill_brewer(palette="Dark2") +
theme(plot.caption =  element_text(hjust = 0.5, size = 16, face = "bold"),
legend.text=element_text(size=16)) +
labs(x = "Quarter of Birth", y = "Education(in years)")
g1.1
# To change those variables which should be factor variables into factor variables
g1.1 <- ggplot(data = da.IV, aes(qob, educ, fill=qob)) +
geom_point(size = 0.5) +
geom_smooth(method = "lm", color = "blue", alpha = 0.2)  +
theme_bw() +
geom_boxplot() + scale_fill_brewer(palette="Dark2") +
theme(plot.caption =  element_text(hjust = 0.5, size = 16, face = "bold"),
legend.text=element_text(size=14)) +
labs(x = "Quarter of Birth", y = "Education(in years)")
g1.1
ggsave(plot = g1.1, height = 6, width = 6,
filename = paste0(dir, "results/section2-2_boxplot.png"))
# To change those variables which should be factor variables into factor variables
g1.1 <- ggplot(data = da.IV, aes(qob, educ, fill=qob)) +
geom_point(size = 0.5) +
geom_smooth(method = "lm", color = "blue", alpha = 0.2)  +
theme_bw() +
geom_boxplot() + scale_fill_brewer(palette="Dark2") +
theme(plot.caption =  element_text(hjust = 0.5, size = 20, face = "bold"),
legend.text=element_text(size=16)) +
labs(x = "Quarter of Birth", y = "Education(in years)")
g1.1
g1.1
ggsave(plot = g1.1, height = 6, width = 6,
filename = paste0(dir, "results/section2-2_boxplot.png"))
ggsave(plot = g1.1, filename = paste0(dir, "results/section2-2_boxplot.png"))
# To change those variables which should be factor variables into factor variables
g1.1 <- ggplot(data = da.IV, aes(qob, educ, fill=qob)) +
geom_point(size = 0.5) +
geom_smooth(method = "lm", color = "blue", alpha = 0.2)  +
theme_bw() +
geom_boxplot() + scale_fill_brewer(palette="Dark2") +
theme(plot.caption =  element_text(hjust = 0.5, size = 20, face = "bold"),
legend.text=element_text(size=16), axis.text=element_text(size=20)) +
labs(x = "Quarter of Birth", y = "Education(in years)")
g1.1
g1.1
ggsave(plot = g1.1, filename = paste0(dir, "results/section2-2_boxplot.png"))
g1.1 <- ggplot(data = da.IV, aes(qob, educ, fill=qob)) +
geom_point(size = 0.5) +
geom_smooth(method = "lm", color = "blue", alpha = 0.2)  +
theme_bw() +
geom_boxplot() + scale_fill_brewer(palette="Dark2") +
theme(plot.caption =  element_text(hjust = 0.5, size = 20, face = "bold"),
legend.text=element_text(size=16), axis.title=element_text(size=20)) +
labs(x = "Quarter of Birth", y = "Education(in years)")
g1.1
ggsave(plot = g1.1, height = 6, width = 6,
filename = paste0(dir, "results/section2-2_boxplot.png"))
# To change those variables which should be factor variables into factor variables
g1.1 <- ggplot(data = da.IV, aes(qob, educ, fill=qob)) +
geom_point(size = 0.5) +
geom_smooth(method = "lm", color = "blue", alpha = 0.2)  +
theme_bw() +
geom_boxplot() + scale_fill_brewer(palette="Dark2") +
theme(plot.caption =  element_text(hjust = 0.5, size = 20, face = "bold"),
legend.text=element_text(size=16), axis.title=element_text(size=20),
axis.text=element_text(size=14)) +
labs(x = "Quarter of Birth", y = "Education(in years)")
g1.1
g1.1
ggsave(plot = g1.1, height = 6, width = 6,
filename = paste0(dir, "results/section2-2_boxplot.png"))
# To change those variables which should be factor variables into factor variables
g1.1 <- ggplot(data = da.IV, aes(qob, educ, fill=qob)) +
geom_point(size = 0.5) +
geom_smooth(method = "lm", color = "blue", alpha = 0.2)  +
theme_bw() +
geom_boxplot() + scale_fill_brewer(palette="Dark2") +
theme(plot.caption =  element_text(hjust = 0.5, size = 20, face = "bold"),
legend.text=element_text(size=16), egend.title=element_text(size=16), axis.title=element_text(size=20),
axis.text=element_text(size=14)) +
labs(x = "Quarter of Birth", y = "Education(in years)")
g1.1
# To change those variables which should be factor variables into factor variables
g1.1 <- ggplot(data = da.IV, aes(qob, educ, fill=qob)) +
geom_point(size = 0.5) +
geom_smooth(method = "lm", color = "blue", alpha = 0.2)  +
theme_bw() +
geom_boxplot() + scale_fill_brewer(palette="Dark2") +
theme(plot.caption =  element_text(hjust = 0.5, size = 20, face = "bold"),
legend.text=element_text(size=16), legend.title=element_text(size=16), axis.title=element_text(size=20),
axis.text=element_text(size=14)) +
labs(x = "Quarter of Birth", y = "Education(in years)")
g1.1
g1.1
ggsave(plot = g1.1, height = 6, width = 6,
filename = paste0(dir, "results/section2-2_boxplot.png"))
knitr::opts_chunk$set(warning = FALSE, message = FALSE,
comment = "", fig.height=2, fig.width=4, fig.align = "center")
library(tidyverse)
library(stargazer)
library(wbstats)
library(ggplot2)
library(plyr)
library(dplyr)
# Define paths
dir <- "C:/Users/eline/Documents/BAM/blok1/ASP/BAM_ASP_A2/"
dir <- "C:/Users/ppria/Documents/BAM_ASP_A2/"
dirProg <- paste0(dir, "programs/")
dirData <- paste0(dir, "data/")
dirRslt <- paste0(dir, "results/")
# Load world bank data
dfExport <- wb_data(indicator=c("IC.EXP.TMBC",       # Time to export
"NY.GDP.PCAP.CD",    # GDP per capita
"TG.VAL.TOTL.GD.ZS", # Merchandise trade % GDP
"NE.EXP.GNFS.ZS",    # Exports of goods and services (% of GDP)
"IC.EXP.CSDC.CD"),   # Cost to export
country = "countries_only",
start_date = 2014,
end_date = 2019)
total_countries <- length(unique(dfExport$country))
total_countries
# Load and save file with variables of interest
save(dfExport, file=paste0(dirData, "SelectedWorldData.sav"))
# Rename column names
colnames(dfExport)[colnames(dfExport) == "date"]              <- "Year"
colnames(dfExport)[colnames(dfExport) == "country"]           <- "Country"
colnames(dfExport)[colnames(dfExport) == "date"]              <- "Year"
colnames(dfExport)[colnames(dfExport) == "IC.EXP.TMBC"]       <- "TimeExport"
colnames(dfExport)[colnames(dfExport) == "NY.GDP.PCAP.CD"]    <- "GDPPerCap"
colnames(dfExport)[colnames(dfExport) == "TG.VAL.TOTL.GD.ZS"] <- "MerchandiseGDP"
colnames(dfExport)[colnames(dfExport) == "NE.EXP.GNFS.ZS"]    <- "ExportGoodsServices"
colnames(dfExport)[colnames(dfExport) == "IC.EXP.CSDC.CD"]    <- "CostExport"
# Subset complete observations, and implement an admittedly arbitrary
# observation period
dfExport.sub <- dfExport[complete.cases(dfExport),]
# Generate list with all countries with complete observations
complete <- dfExport.sub %>%
dplyr::count(Country) %>%
filter(n == 6)
completeCountry <- as.vector(complete$Country)
# Generate data frame only containing countries with complete observations
dfExport.sub.cmplt <- dfExport.sub %>%
filter(Country %in% completeCountry)
# Convert to data frame
dfExport.sub.cmplt <- as.data.frame(dfExport.sub.cmplt)
# Generate table with summary statistics
stargazer(dfExport.sub.cmplt)
#Select observation with non missing TimeExport and CostExport
dfExport.sub.cmplt<- subset(dfExport.sub, !is.na(TimeExport)& !is.na(CostExport),
select= c(Country, Year, TimeExport, CostExport))
#Determine country averages of TimeExport and CostExport to the data frame
dfExport.sub.cmplt.avg<- ddply(dfExport.sub.cmplt, .(Country), summarise,
avgTimeExport = mean(TimeExport, na.rm = TRUE),
avgCostExport = mean(CostExport, na.rm = TRUE),
runValid = length(Country))
#Merge
dfExport.sub.cmplt <- merge(dfExport.sub.cmplt, dfExport.sub.cmplt.avg, by= "Country")
#Calculate deamed value of the dependent
attach(dfExport.sub.cmplt)
dfExport.sub.cmplt$diff.TimeExport <- TimeExport - avgTimeExport
dfExport.sub.cmplt$diff.CostExport <- CostExport - avgCostExport
detach(dfExport.sub.cmplt)
#Select countries
subCountries <- c("Australia", "Bolivia", "Brazil","Portugal", "Thailand", "Bulgaria", "China", "Finland", "India")
dfExport.sub.cmplt <- dfExport.sub.cmplt[dfExport.sub.cmplt$Country %in% subCountries,]
dfExport.sub.cmplt.avg <- dfExport.sub.cmplt.avg[dfExport.sub.cmplt.avg$Country %in% subCountries,]
